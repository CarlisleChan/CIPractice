apply plugin: 'checkstyle'
apply plugin: 'findbugs'
apply plugin: 'pmd'
// Add checkstyle, findbugs, pmd and lint to the check task.
check.dependsOn 'checkstyle', 'findbugs', 'pmd', 'lint'

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/analysis/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionsPath = file("${project.rootDir}/analysis/checkstyle/suppressions.xml").absolutePath
    source 'src'
    include '**/*.java'
    exclude '**/gen/**'
    classpath = files()
    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination "$project.buildDir/outputs/checkstyle/checkstyle.xml"
        }
        html {
            destination "$project.buildDir/outputs/checkstyle/checkstyle.html"
        }
    }
}

task findbugs(type: FindBugs) {
    ignoreFailures = true
    effort = "max"
    reportLevel = "high"
    excludeFilter = new File("${project.rootDir}/analysis/findbugs/findbugs-filter.xml")
    classes = files("$project.buildDir/intermediates/classes")

    source fileTree('src/main/java/')
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        xml {
            destination "$project.buildDir/outputs/findbugs/findbugs.xml"
        }
    }

    classpath = files()
}

task pmd(type: Pmd) {
    ignoreFailures = true
    ruleSetFiles = files("${project.rootDir}/analysis/pmd/pmd-ruleset.xml")
    ruleSets = []

    source 'src'
    include '**/*.java'
    exclude '**/gen/**'

    reports {
        xml.enabled = true
        html.enabled = true
        xml {
            destination "$project.buildDir/outputs/pmd/pmd.xml"
        }
        html {
            destination "$project.buildDir/outputs/pmd/pmd.html"
        }
    }
}

android {
    lintOptions {
        abortOnError true
        xmlReport true
        htmlReport true
        lintConfig file("${project.rootDir}/analysis/lint/lint.xml")
        htmlOutput file("$project.buildDir/outputs/lint/lint-result.html")
        xmlOutput file("$project.buildDir/outputs/lint/lint-result.xml")
    }
}

// recommend to specify the flavor once and dynamically adapt paths to it
def flavor = "develop" // flavor we want to have tested. Should be static
def Flavor = "Develop" // flavor again, but starting with upper case

// noinspection is used to remove some "warnings" from Android Studio
sonarqube {
    //noinspection GroovyAssignabilityCheck
    properties {
        /* Sonar needs to be informed about your libraries and the android.jar to understand that methods like
         * onResume() is called by the Android framework. Without that information Sonar will very likely create warnings
         * that those methods are never used and they should be removed. Same applies for libraries where parent classes
         * are required to understand how a class works and is used. */
        def libraries = project.android.sdkDirectory.getPath() + "/platforms/android-25/android.jar," +
                "build/intermediates/exploded-aar/**/classes.jar"

        property "sonar.host.url", "http://localhost:9000/sonar"
        property "sonar.projectKey", "CIPractice" // some shortcut name
        property "sonar.projectName", "CIPractice"
        property "sonar.projectVersion", AppVersion

        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java,src/main/res"
        // first defines where the java files are, the second where the xml files are
        property "sonar.binaries", "build/intermediates/classes/${flavor}/debug"
        property "sonar.libraries", libraries
        property "sonar.java.binaries", "build/intermediates/classes/${flavor}/debug"
        property "sonar.java.libraries", libraries

        property "sonar.tests", "src/test/java" // where the tests are located
        property "sonar.java.test.binaries", "build/intermediates/classes/${flavor}/debug"
        property "sonar.java.test.libraries", libraries

        property "sonar.scm.provider", "git"

//        property "sonar.jacoco.reportPath", "build/jacoco/test${Flavor}DebugUnitTest.exec"
        // path to coverage reports
//        property "sonar.java.coveragePlugin", "jacoco"
        property "sonar.junit.reportsPath", "build/test-results/${flavor}Debug"
        // path to junit reports
        property "sonar.android.lint.report", "build/outputs/lint-results-${flavor}Debug.xml"
        // path to lint reports
    }
}